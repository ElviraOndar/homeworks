# Инициализация игровой карты
maps = [' ', 0, 1, 2,
        0, '-', '-', '-',
        1, '-', '-', '-',
        2, '-', '-', '-']

# Вывод карты на экран
def print_maps():
    print(maps[0], end=" ")
    print(maps[1], end=" ")
    print(maps[2], end=" ")
    print(maps[3])

    print(maps[4], end=" ")
    print(maps[5], end=" ")
    print(maps[6], end=" ")
    print(maps[7])

    print(maps[8], end=" ")
    print(maps[9], end=" ")
    print(maps[10], end=" ")
    print(maps[11])

    print(maps[12], end=" ")
    print(maps[13], end=" ")
    print(maps[14], end=" ")
    print(maps[15])

# Пусть игроки присылают координаты в формате 0.0, 1.1 и так далее

# Мы используем словарь coords в функции step_maps (сделать ход),
# чтобы фиксировать ходы каждого игрока и помещать символ Х или 0
# в нужную ячейку
# Если введенных координат нет в словаре coords, то мы попросим ввести заново

coords = {'0.0': 5, '0.1': 6, '0.2': 7,
          '1.0': 9, '1.1': 10, '1.2': 11,
          '2.0': 13, '2.1': 14, '2.2': 15}


#Заводим счетчик ходов steps_counter. Он будет в виде списка, чтобы можно было
# передавать его в функцию step_maps (сделать ход) и
# увеличивать значение счетчика  внутри этой функции.
# Если значение  нечетное, то ходит Игрок 1, а если четное, то ходит Игрок 2

steps_counter = [1]

#Заводим функцию redo_step,которая просит сходить заново в случае попытки хода на занятую ячейку
def redo_step():
    print('Эта ячейка уже занята. Попробуйте занять другую')

# Функция step_maps позволяет сделать ход в ячейку, либо просит ввести координаты заново,
# если игрок ввел данные в неправильном формате
def step_maps(step: str, symbol: str, steps_counter: list):
    if step != '0.0' and step != '0.1' and step != '0.2' and step != '1.0' and step != '1.1' and step != '1.2' and step != '2.0' and step != '2.1' and step != '2.2':
        print('Такой ячейки не существует. Пожалуйста, введите другие координаты ячейки')
    elif maps[coords[step]] == '-':  #если ячейка не занята символом X или 0
        maps[coords[step]] = symbol  #записываем в эту ячейку символ
        steps_counter[0] += 1        # увеличиваем счетчик шагов
    else:
        redo_step()                  # просим выбрать другую ячейку, если что-то пошло не так

# Список со всеми вариантами победы
victories = [[5, 6, 7],
             [9, 10, 11],
             [13, 14, 15],
             [5, 9, 13],
             [6, 10, 14],
             [7, 11, 15],
             [5, 10, 15],
             [7, 10, 13]]

# Проверяем, случился ли какой-то из вариантов победы
def get_result():
    win = ""
    for i in victories:
        if maps[i[0]] == "X" and maps[i[1]] == "X" and maps[i[2]] == "X":
            win = "X"
        if maps[i[0]] == "O" and maps[i[1]] == "O" and maps[i[2]] == "O":
            win = "O"

    return win


# Начинается игра

print("""Пожалуйста, вводите координаты ячейки в формате 0.0, 1.2 и так далее.
Первая цифра определяет вертикаль, вторая - горизонталь
""")

game_over = False

while game_over is False:

    # 1. Показываем карту
    print_maps()

    # 2. Просим игрока сделать ход

    if steps_counter[0] % 2 != 0:  #если счетчик ходов нечетный, то ходит Игрок 1
        symbol = "X"
        step = input("Игрок 1, ваш ход: ")
    else:
        symbol = "O"
        step = input("Игрок 2, ваш ход: ")

    step_maps(step, symbol, steps_counter)  # делаем ход в указанную ячейку

# определяем победителя или ничейный результат

    win = get_result()
    if win == "" and steps_counter[0] == 10:
        game_over = True
        print_maps()
        print('У вас ничья!')
    elif win != "":
        game_over = True
        print_maps()
        print("Победил", win)
    else:
        game_over = False